@page "/"

@inject ICategoryData catData;
@inject IUserData userData;
@inject IStatusData statusData;
@inject ISuggestionData suggestData;

@inject NavigationManager navManager;
@inject ProtectedSessionStorage sessionStorage;


<h1>Training Suggestion</h1>

<div>
    <button>Suggest</button>
</div>

<div>
    @suggestions?.Count Suggestions
    <div>
        <button onclick="(() => OrderByNew(true))">New</button>
        <button onclick="(() => OrderByNew(false))">Popular</button>
    </div>
</div>

<div>
    <input type="text" placeholder="Search"
           aria-label="Search box" @oninput="((txt) => OnSearchInput((string) txt.Value))"/>
</div>

<div>
    <div>
        @if (suggestions is not null)
        {
            <Virtualize Items="@suggestions" Context="s" OverscanCount="5">
                <div>
                    <div>
                        <div> @GetUpvoteTopText(s)</div>
                        <span class="oi oi-caret-top"></span>
                        <div>@GetUpvotedBottomText(s)</div>
                    </div>
                    <div>
                        <div @onclick="(() => OpenDetails(s))">
                            @s.Suggestion
                        </div>
                        <div @onclick="(() => OpenDetails(s))">
                            @s.Category?.CategoryName
                        </div>
                    </div>
                    <div>                        
                        <div>
                            @s.SuggestionStatus?.StatusName
                        </div>
                    </div>
                </div>
            </Virtualize>
        }
    </div>
    <div>
        @if (categories is not null)
        {
            <div>
                <span>Category</span>
                <div @onclick="(() => OnCategoryClick())">All</div>
                @foreach (var c in categories)
                {
                    <div @onclick="(() => OnCategoryClick(c.CategoryName))">
                        @c.CategoryName
                    </div>
                }
            </div>
        }
    </div>
    <div>
        @if (statuses is not null)
        {
            <div>
                <span>Status</span>
                <div @onclick="(() => OnStatusClick())">All</div>
                @foreach (var status in statuses)
                {
                    <div @onclick="(() => OnStatusClick(status.StatusName))"> @status.StatusName</div>
                }
            </div>
        }
    </div>
</div>

@code{

            // variable setup
    private List<SuggestionModel> suggestions;
    private List<CategoryModel> categories;
    private List<StatusModel> statuses;


    private string selectedCategory = "All";
    private string selectedStatus = "All ";
    private string searchText = "";
    bool isSortedByNew = true;

    protected async override Task OnInitializedAsync()
    {
        categories = await catData.GetAllCategories();
        statuses = await statusData.GetAllStatuses();
    }

    protected async override Task OnAfterRenderAsync(bool  firstRender)
    {
        if (firstRender)
        {
            await LoadFilterState();
            await FilterSuggestions();
            StateHasChanged();
        }
    }

    private async Task LoadFilterState()
    {
        var stringResult = await sessionStorage.GetAsync<string>(nameof(selectedCategory));
        selectedCategory = stringResult.Success ? stringResult.Value : "All";

        stringResult = await sessionStorage.GetAsync<string>(nameof(selectedStatus));
        selectedStatus = stringResult.Success ? stringResult.Value : "All";

        stringResult = await sessionStorage.GetAsync<string>(nameof(searchText));
        searchText = stringResult.Success ? stringResult.Value : "";

        var boolResult = await sessionStorage.GetAsync<bool>(nameof(isSortedByNew));
        isSortedByNew = boolResult.Success ? boolResult.Value : true;
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(selectedCategory), selectedCategory);
        await sessionStorage.SetAsync(nameof(selectedStatus), selectedStatus);
        await sessionStorage.SetAsync(nameof(searchText), searchText);
        await sessionStorage.SetAsync(nameof(isSortedByNew), isSortedByNew);
    }

    private async Task FilterSuggestions()
    {
        var output = await suggestData.GetAllApprovedSuggestions();
        if(selectedCategory != "All")
        {
            output = output.Where(s => s.Category?.CategoryName == selectedCategory).ToList();
        }

        if (selectedStatus != "All")
        {
            output = output.Where(s => s.SuggestionStatus?.StatusName == selectedStatus).ToList();
        }

        if (string.IsNullOrWhiteSpace(searchText) == false)
        {
            output = output.Where(
                s => s.Suggestion.Contains(searchText, StringComparison.CurrentCultureIgnoreCase) ||
                s.Description.Contains(searchText, StringComparison.CurrentCultureIgnoreCase) )
                .ToList();
        }

        if (isSortedByNew)
        {
            output = output.OrderByDescending(s => s.DateCreated).ToList();
        }
        else
        {
            output = output.OrderByDescending(s => s.UserVotes.Count)
                .ThenByDescending(s => s.DateCreated).ToList();
        }

        suggestions = output;

        await SaveFilterState();
    }

    private async Task OrderByNew(bool isNew)
    {
        isSortedByNew = isNew;
        await FilterSuggestions();
    }

    private async Task OnSearchInput(string searchInput) {
        searchText = searchInput;
        await FilterSuggestions();
    }

    private async Task OnCategoryClick(string category = "All") {
        selectedCategory = category;
        await FilterSuggestions();
    }

    private async Task OnStatusClick(string status = "All") {
        selectedStatus = status;
        await FilterSuggestions();
    }

    private string GetUpvoteTopText(SuggestionModel suggestion) {
        if (suggestion.UserVotes?.Count > 0)
        {
            return suggestion.UserVotes.Count.ToString("00");
        }
        else {
            return "Click To";
        }
    }

    private string GetUpvotedBottomText(SuggestionModel suggestion) {
        if (suggestion.UserVotes?.Count > 1)
        {
            return "Upvotes";
        }
        else
        {
            return "Upvote";
        }

    }

    private void OpenDetails(SuggestionModel suggestion) {
        navManager.NavigateTo($"/Details/{suggestion.Id}");
    }
}



